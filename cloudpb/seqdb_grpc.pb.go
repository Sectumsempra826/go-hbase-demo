// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: seqdb.proto

package cloudpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeqDbClient is the client API for SeqDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeqDbClient interface {
	Put(ctx context.Context, in *SeqItems, opts ...grpc.CallOption) (*PutItemResp, error)
	Get(ctx context.Context, in *SeqKey, opts ...grpc.CallOption) (*SeqItem, error)
	GetMaxKey(ctx context.Context, in *SeqKey, opts ...grpc.CallOption) (*SeqKey, error)
	QueryRange(ctx context.Context, in *RangeReq, opts ...grpc.CallOption) (*SeqItems, error)
	DeleteRange(ctx context.Context, in *RangeReq, opts ...grpc.CallOption) (*DelRangeResp, error)
}

type seqDbClient struct {
	cc grpc.ClientConnInterface
}

func NewSeqDbClient(cc grpc.ClientConnInterface) SeqDbClient {
	return &seqDbClient{cc}
}

func (c *seqDbClient) Put(ctx context.Context, in *SeqItems, opts ...grpc.CallOption) (*PutItemResp, error) {
	out := new(PutItemResp)
	err := c.cc.Invoke(ctx, "/cloudpb.SeqDb/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqDbClient) Get(ctx context.Context, in *SeqKey, opts ...grpc.CallOption) (*SeqItem, error) {
	out := new(SeqItem)
	err := c.cc.Invoke(ctx, "/cloudpb.SeqDb/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqDbClient) GetMaxKey(ctx context.Context, in *SeqKey, opts ...grpc.CallOption) (*SeqKey, error) {
	out := new(SeqKey)
	err := c.cc.Invoke(ctx, "/cloudpb.SeqDb/GetMaxKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqDbClient) QueryRange(ctx context.Context, in *RangeReq, opts ...grpc.CallOption) (*SeqItems, error) {
	out := new(SeqItems)
	err := c.cc.Invoke(ctx, "/cloudpb.SeqDb/QueryRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqDbClient) DeleteRange(ctx context.Context, in *RangeReq, opts ...grpc.CallOption) (*DelRangeResp, error) {
	out := new(DelRangeResp)
	err := c.cc.Invoke(ctx, "/cloudpb.SeqDb/DeleteRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeqDbServer is the server API for SeqDb service.
// All implementations must embed UnimplementedSeqDbServer
// for forward compatibility
type SeqDbServer interface {
	Put(context.Context, *SeqItems) (*PutItemResp, error)
	Get(context.Context, *SeqKey) (*SeqItem, error)
	GetMaxKey(context.Context, *SeqKey) (*SeqKey, error)
	QueryRange(context.Context, *RangeReq) (*SeqItems, error)
	DeleteRange(context.Context, *RangeReq) (*DelRangeResp, error)
	mustEmbedUnimplementedSeqDbServer()
}

// UnimplementedSeqDbServer must be embedded to have forward compatible implementations.
type UnimplementedSeqDbServer struct {
}

func (UnimplementedSeqDbServer) Put(context.Context, *SeqItems) (*PutItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedSeqDbServer) Get(context.Context, *SeqKey) (*SeqItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSeqDbServer) GetMaxKey(context.Context, *SeqKey) (*SeqKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxKey not implemented")
}
func (UnimplementedSeqDbServer) QueryRange(context.Context, *RangeReq) (*SeqItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRange not implemented")
}
func (UnimplementedSeqDbServer) DeleteRange(context.Context, *RangeReq) (*DelRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRange not implemented")
}
func (UnimplementedSeqDbServer) mustEmbedUnimplementedSeqDbServer() {}

// UnsafeSeqDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeqDbServer will
// result in compilation errors.
type UnsafeSeqDbServer interface {
	mustEmbedUnimplementedSeqDbServer()
}

func RegisterSeqDbServer(s grpc.ServiceRegistrar, srv SeqDbServer) {
	s.RegisterService(&SeqDb_ServiceDesc, srv)
}

func _SeqDb_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqDbServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudpb.SeqDb/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqDbServer).Put(ctx, req.(*SeqItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqDb_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqDbServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudpb.SeqDb/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqDbServer).Get(ctx, req.(*SeqKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqDb_GetMaxKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqDbServer).GetMaxKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudpb.SeqDb/GetMaxKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqDbServer).GetMaxKey(ctx, req.(*SeqKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqDb_QueryRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqDbServer).QueryRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudpb.SeqDb/QueryRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqDbServer).QueryRange(ctx, req.(*RangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqDb_DeleteRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqDbServer).DeleteRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudpb.SeqDb/DeleteRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqDbServer).DeleteRange(ctx, req.(*RangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeqDb_ServiceDesc is the grpc.ServiceDesc for SeqDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeqDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudpb.SeqDb",
	HandlerType: (*SeqDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _SeqDb_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SeqDb_Get_Handler,
		},
		{
			MethodName: "GetMaxKey",
			Handler:    _SeqDb_GetMaxKey_Handler,
		},
		{
			MethodName: "QueryRange",
			Handler:    _SeqDb_QueryRange_Handler,
		},
		{
			MethodName: "DeleteRange",
			Handler:    _SeqDb_DeleteRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seqdb.proto",
}
